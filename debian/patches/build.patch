From: Markus Koschany <apo@debian.org>
Date: Thu, 11 Feb 2016 18:18:32 +0100
Subject: build

The original upstream distribution of apktool is packaged as a so called "fatJar"
which includes all dependencies in one jar file. The Debian approach is to use
separate jar files which are simpler to maintain and security vulnerabilites
can be quickly fixed once.

Forwarded: not-needed
---
 brut.apktool.smali/baksmali/build.gradle | 22 +++++++++++-----------
 brut.apktool.smali/smali/build.gradle    | 24 ++++++++++++------------
 brut.apktool/apktool-cli/build.gradle    | 22 +++++++++++-----------
 build.gradle                             |  2 +-
 4 files changed, 35 insertions(+), 35 deletions(-)

diff --git a/brut.apktool.smali/baksmali/build.gradle b/brut.apktool.smali/baksmali/build.gradle
index 0a1ad66..7b10ef4 100644
--- a/brut.apktool.smali/baksmali/build.gradle
+++ b/brut.apktool.smali/baksmali/build.gradle
@@ -52,21 +52,21 @@ processResources.inputs.property('version', version)
 processResources.expand('version': version)
 
 // build a jar containing all dependencies
-task fatJar (type: Jar) {
-    from sourceSets.main.output
-    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
+//task fatJar (type: Jar) {
+//    from sourceSets.main.output
+//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
 
-    manifest {
-        attributes('Main-Class': 'org.jf.baksmali.main')
-    }
-}
+//    manifest {
+//        attributes('Main-Class': 'org.jf.baksmali.main')
+//    }
+//}
 
-tasks.getByPath('build').dependsOn(fatJar)
+tasks.getByPath('build')
 
-task proguard(type: proguard.gradle.ProGuardTask, dependsOn: fatJar) {
-    def outFile = fatJar.destinationDir.getPath() + '/' + fatJar.baseName + '-' + fatJar.version + '-small' + '.' + fatJar.extension
+task proguard(type: proguard.gradle.ProGuardTask) {
+    def outFile = jar.destinationDir.getPath() + '/' + jar.baseName + '-' + jar.version + '-small' + '.' + jar.extension
 
-    injars fatJar.archivePath
+    injars jar.archivePath
     outjars outFile
 
     libraryjars "${System.properties['java.home']}/lib/rt.jar"
diff --git a/brut.apktool.smali/smali/build.gradle b/brut.apktool.smali/smali/build.gradle
index 383660d..4daa908 100644
--- a/brut.apktool.smali/smali/build.gradle
+++ b/brut.apktool.smali/smali/build.gradle
@@ -85,15 +85,15 @@ processResources.inputs.property('version', version)
 processResources.expand('version': version)
 
 // build a jar containing all dependencies
-task fatJar (type: Jar) {
-    from sourceSets.main.output
-    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
+//task fatJar (type: Jar) {
+//    from sourceSets.main.output
+//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
 
-    manifest {
-        attributes('Main-Class': 'org.jf.smali.main')
-    }
-}
-tasks.getByPath('build').dependsOn(fatJar)
+//    manifest {
+//        attributes('Main-Class': 'org.jf.smali.main')
+//    }
+//}
+tasks.getByPath('build')
 
 generateTestGrammarSource {
     outputDirectory = new File(outputDirectory, 'org/jf/smali')
@@ -107,11 +107,11 @@ generateJFlexSource {
     outputDirectory = new File(outputDirectory, 'org/jf/smali')
 }
 
-task proguard(type: proguard.gradle.ProGuardTask, dependsOn: fatJar) {
-    def outFile = fatJar.destinationDir.getPath() + '/' + fatJar.baseName + '-' +
-            fatJar.version + '-small' + '.' + fatJar.extension
+task proguard(type: proguard.gradle.ProGuardTask) {
+    def outFile = jar.destinationDir.getPath() + '/' + jar.baseName + '-' +
+            jar.version + '-small' + '.' + jar.extension
 
-    injars fatJar.archivePath
+    injars jar.archivePath
     outjars outFile
 
     libraryjars "${System.properties['java.home']}/lib/rt.jar"
diff --git a/brut.apktool/apktool-cli/build.gradle b/brut.apktool/apktool-cli/build.gradle
index e33e79c..ddb7641 100644
--- a/brut.apktool/apktool-cli/build.gradle
+++ b/brut.apktool/apktool-cli/build.gradle
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-apply plugin: 'eu.appsatori.fatjar'
+//apply plugin: 'eu.appsatori.fatjar'
 
 dependencies {
     compile project(':brut.apktool:apktool-lib')
@@ -29,22 +29,22 @@ buildscript {
     }
 }
 
-gradle.taskGraph.whenReady {
-  fatJar { 
-    manifest {
-      attributes("Main-Class": "brut.apktool.Main")
-    }
-  }
-}
+//gradle.taskGraph.whenReady {
+//  fatJar { 
+//    manifest {
+//      attributes("Main-Class": "brut.apktool.Main")
+//    }
+//  }
+//}
 
 task cleanOutputDirectory(type: Delete) {
     delete fileTree(dir: jar.destinationDir.getPath(), exclude: "apktool-cli.jar")
 }
 
-task proguard(type: proguard.gradle.ProGuardTask, dependsOn: fatJar) {
+task proguard(type: proguard.gradle.ProGuardTask) {
     def outFile = jar.destinationDir.getPath() + '/' + "apktool" + '-' + project.apktool_version + '-small' + '.' + jar.extension
 
-    injars fatJar.archivePath
+    injars jar.archivePath
     outjars outFile
 
     libraryjars "${System.properties['java.home']}/lib/rt.jar"
@@ -63,4 +63,4 @@ task proguard(type: proguard.gradle.ProGuardTask, dependsOn: fatJar) {
 }
 
 proguard.dependsOn cleanOutputDirectory
-tasks.getByPath(':release').dependsOn(proguard)
\ No newline at end of file
+tasks.getByPath(':release').dependsOn(proguard)
diff --git a/build.gradle b/build.gradle
index 1019643..3d8eed2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -77,7 +77,7 @@ buildscript {
         options.incremental = true
     }
     dependencies {
-        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
+        //classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
     }
 }
 
